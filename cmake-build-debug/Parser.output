Terminals unused in grammar

    WEAK


State 83 conflicts: 11 shift/reduce


Grammar

    0 $accept: translationUnit $end

    1 translationUnit: classes compoundStmt

    2 compoundStmt: %empty
    3             | compoundStmt statement

    4 identifier: IDENT

    5 memberAccess: expression "." identifier

    6 varDecl: identifier ":" identifier

    7 memberDecl: memberAccess ":" identifier

    8 staticAssignment: varDecl "=" expression
    9                 | memberDecl "=" expression

   10 assignment: memberAccess "=" expression
   11           | identifier "=" expression

   12 returnStmt: RETURN expression
   13           | RETURN

   14 ifStmt: IF expression "{" compoundStmt "}" optElseIf

   15 optElseIf: ELIF expression "{" compoundStmt "}" optElseIf
   16          | ELSE "{" compoundStmt "}"
   17          | %empty

   18 whileStmt: WHILE expression "{" compoundStmt "}"

   19 statement: ";"
   20          | expression ";"
   21          | assignment ";"
   22          | staticAssignment ";"
   23          | returnStmt ";"
   24          | ifStmt
   25          | whileStmt

   26 binaryOperator: "+"
   27               | "-"
   28               | "*"
   29               | "/"
   30               | "%"
   31               | "<"
   32               | ">"
   33               | "<="
   34               | ">="
   35               | "=="

   36 unaryOperator: "!"
   37              | "-"

   38 call: expression "." identifier "(" args ")"

   39 args: argsNonEmpty
   40     | %empty

   41 argsNonEmpty: expression
   42             | argsNonEmpty "," expression

   43 params: paramsNonEmpty
   44       | %empty

   45 paramsNonEmpty: varDecl
   46               | paramsNonEmpty "," varDecl

   47 method: DEF identifier "(" params ")" ":" identifier "{" compoundStmt "}"
   48       | DEF identifier "(" params ")" "{" compoundStmt "}"

   49 methods: methodsNonEmpty
   50        | %empty

   51 methodsNonEmpty: method
   52                | methodsNonEmpty "," method

   53 class: CLASS identifier "(" params ")" "{" compoundStmt methods "}"
   54      | CLASS identifier "(" params ")" EXTENDS identifier "{" compoundStmt methods "}"

   55 classes: classesNonEmpty
   56        | %empty

   57 classesNonEmpty: class
   58                | classesNonEmpty "," class

   59 expression: INT
   60           | FLOAT
   61           | BOOL
   62           | STRING_LIT
   63           | THIS
   64           | identifier
   65           | "(" expression ")"
   66           | call
   67           | memberAccess
   68           | unaryOperator expression
   69           | expression binaryOperator expression


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    "=" (258) 8 9 10 11
    "-" (259) 27 37
    "+" (260) 26
    "*" (261) 28
    "/" (262) 29
    "%" (263) 30
    "<" (264) 31
    ">" (265) 32
    "<=" (266) 33
    ">=" (267) 34
    "==" (268) 35
    "!" (269) 36
    ":" (270) 6 7 47
    "." (271) 5 38
    ";" (272) 19 20 21 22 23
    "(" (273) 38 47 48 53 54 65
    ")" (274) 38 47 48 53 54 65
    "{" (275) 14 15 16 18 47 48 53 54
    "}" (276) 14 15 16 18 47 48 53 54
    INT <long> (277) 59
    FLOAT <double> (278) 60
    BOOL <bool> (279) 61
    STRING_LIT <std::string> (280) 62
    THIS <std::string> (281) 63
    IDENT <std::string> (282) 4
    WEAK <std::string> (283)
    CLASS <std::string> (284) 53 54
    EXTENDS <std::string> (285) 54
    DEF <std::string> (286) 47 48
    RETURN <std::string> (287) 12 13
    IF <std::string> (288) 14
    ELIF <std::string> (289) 15
    ELSE <std::string> (290) 16
    WHILE <std::string> (291) 18
    UMINUS (292)
    "," (293) 42 46 52 58


Nonterminals, with rules where they appear

    $accept (39)
        on left: 0
    translationUnit <ptr<TranslationUnit>> (40)
        on left: 1
        on right: 0
    compoundStmt <ptr<CompoundStmt>> (41)
        on left: 2 3
        on right: 1 3 14 15 16 18 47 48 53 54
    identifier <ptr<Identifier>> (42)
        on left: 4
        on right: 5 6 7 11 38 47 48 53 54 64
    memberAccess <ptr<MemberAccess>> (43)
        on left: 5
        on right: 7 10 67
    varDecl <ptr<VarDecl>> (44)
        on left: 6
        on right: 8 45 46
    memberDecl <ptr<StaticMemberDecl>> (45)
        on left: 7
        on right: 9
    staticAssignment <ptr<StaticAssignment>> (46)
        on left: 8 9
        on right: 22
    assignment <ptr<Assignment>> (47)
        on left: 10 11
        on right: 21
    returnStmt <ptr<Return>> (48)
        on left: 12 13
        on right: 23
    ifStmt <ptr<If>> (49)
        on left: 14
        on right: 24
    optElseIf <ptr<CompoundStmt>> (50)
        on left: 15 16 17
        on right: 14 15
    whileStmt <ptr<While>> (51)
        on left: 18
        on right: 25
    statement <ptr<Statement>> (52)
        on left: 19 20 21 22 23 24 25
        on right: 3
    binaryOperator <BinaryOperator::Operator> (53)
        on left: 26 27 28 29 30 31 32 33 34 35
        on right: 69
    unaryOperator <UnaryOperator::Operator> (54)
        on left: 36 37
        on right: 68
    call <ptr<Call>> (55)
        on left: 38
        on right: 66
    args <ptr<Arguments>> (56)
        on left: 39 40
        on right: 38
    argsNonEmpty <ptr<Arguments>> (57)
        on left: 41 42
        on right: 39 42
    params <ptr<Parameters>> (58)
        on left: 43 44
        on right: 47 48 53 54
    paramsNonEmpty <ptr<Parameters>> (59)
        on left: 45 46
        on right: 43 46
    method <ptr<Method>> (60)
        on left: 47 48
        on right: 51 52
    methods <ptr<Methods>> (61)
        on left: 49 50
        on right: 53 54
    methodsNonEmpty <ptr<Methods>> (62)
        on left: 51 52
        on right: 49 52
    class <ptr<Class>> (63)
        on left: 53 54
        on right: 57 58
    classes <ptr<Classes>> (64)
        on left: 55 56
        on right: 1
    classesNonEmpty <ptr<Classes>> (65)
        on left: 57 58
        on right: 55 58
    expression <ptr<Expression>> (66)
        on left: 59 60 61 62 63 64 65 66 67 68 69
        on right: 5 8 9 10 11 12 14 15 18 20 38 41 42 65 68 69


State 0

    0 $accept: • translationUnit $end

    CLASS  shift, and go to state 1

    $default  reduce using rule 56 (classes)

    translationUnit  go to state 2
    class            go to state 3
    classes          go to state 4
    classesNonEmpty  go to state 5


State 1

   53 class: CLASS • identifier "(" params ")" "{" compoundStmt methods "}"
   54      | CLASS • identifier "(" params ")" EXTENDS identifier "{" compoundStmt methods "}"

    IDENT  shift, and go to state 6

    identifier  go to state 7


State 2

    0 $accept: translationUnit • $end

    $end  shift, and go to state 8


State 3

   57 classesNonEmpty: class •

    $default  reduce using rule 57 (classesNonEmpty)


State 4

    1 translationUnit: classes • compoundStmt

    $default  reduce using rule 2 (compoundStmt)

    compoundStmt  go to state 9


State 5

   55 classes: classesNonEmpty •
   58 classesNonEmpty: classesNonEmpty • "," class

    ","  shift, and go to state 10

    $default  reduce using rule 55 (classes)


State 6

    4 identifier: IDENT •

    $default  reduce using rule 4 (identifier)


State 7

   53 class: CLASS identifier • "(" params ")" "{" compoundStmt methods "}"
   54      | CLASS identifier • "(" params ")" EXTENDS identifier "{" compoundStmt methods "}"

    "("  shift, and go to state 11


State 8

    0 $accept: translationUnit $end •

    $default  accept


State 9

    1 translationUnit: classes compoundStmt •
    3 compoundStmt: compoundStmt • statement

    "-"         shift, and go to state 12
    "!"         shift, and go to state 13
    ";"         shift, and go to state 14
    "("         shift, and go to state 15
    INT         shift, and go to state 16
    FLOAT       shift, and go to state 17
    BOOL        shift, and go to state 18
    STRING_LIT  shift, and go to state 19
    THIS        shift, and go to state 20
    IDENT       shift, and go to state 6
    RETURN      shift, and go to state 21
    IF          shift, and go to state 22
    WHILE       shift, and go to state 23

    $default  reduce using rule 1 (translationUnit)

    identifier        go to state 24
    memberAccess      go to state 25
    varDecl           go to state 26
    memberDecl        go to state 27
    staticAssignment  go to state 28
    assignment        go to state 29
    returnStmt        go to state 30
    ifStmt            go to state 31
    whileStmt         go to state 32
    statement         go to state 33
    unaryOperator     go to state 34
    call              go to state 35
    expression        go to state 36


State 10

   58 classesNonEmpty: classesNonEmpty "," • class

    CLASS  shift, and go to state 1

    class  go to state 37


State 11

   53 class: CLASS identifier "(" • params ")" "{" compoundStmt methods "}"
   54      | CLASS identifier "(" • params ")" EXTENDS identifier "{" compoundStmt methods "}"

    IDENT  shift, and go to state 6

    $default  reduce using rule 44 (params)

    identifier      go to state 38
    varDecl         go to state 39
    params          go to state 40
    paramsNonEmpty  go to state 41


State 12

   37 unaryOperator: "-" •

    $default  reduce using rule 37 (unaryOperator)


State 13

   36 unaryOperator: "!" •

    $default  reduce using rule 36 (unaryOperator)


State 14

   19 statement: ";" •

    $default  reduce using rule 19 (statement)


State 15

   65 expression: "(" • expression ")"

    "-"         shift, and go to state 12
    "!"         shift, and go to state 13
    "("         shift, and go to state 15
    INT         shift, and go to state 16
    FLOAT       shift, and go to state 17
    BOOL        shift, and go to state 18
    STRING_LIT  shift, and go to state 19
    THIS        shift, and go to state 20
    IDENT       shift, and go to state 6

    identifier     go to state 42
    memberAccess   go to state 43
    unaryOperator  go to state 34
    call           go to state 35
    expression     go to state 44


State 16

   59 expression: INT •

    $default  reduce using rule 59 (expression)


State 17

   60 expression: FLOAT •

    $default  reduce using rule 60 (expression)


State 18

   61 expression: BOOL •

    $default  reduce using rule 61 (expression)


State 19

   62 expression: STRING_LIT •

    $default  reduce using rule 62 (expression)


State 20

   63 expression: THIS •

    $default  reduce using rule 63 (expression)


State 21

   12 returnStmt: RETURN • expression
   13           | RETURN •

    "-"         shift, and go to state 12
    "!"         shift, and go to state 13
    "("         shift, and go to state 15
    INT         shift, and go to state 16
    FLOAT       shift, and go to state 17
    BOOL        shift, and go to state 18
    STRING_LIT  shift, and go to state 19
    THIS        shift, and go to state 20
    IDENT       shift, and go to state 6

    $default  reduce using rule 13 (returnStmt)

    identifier     go to state 42
    memberAccess   go to state 43
    unaryOperator  go to state 34
    call           go to state 35
    expression     go to state 45


State 22

   14 ifStmt: IF • expression "{" compoundStmt "}" optElseIf

    "-"         shift, and go to state 12
    "!"         shift, and go to state 13
    "("         shift, and go to state 15
    INT         shift, and go to state 16
    FLOAT       shift, and go to state 17
    BOOL        shift, and go to state 18
    STRING_LIT  shift, and go to state 19
    THIS        shift, and go to state 20
    IDENT       shift, and go to state 6

    identifier     go to state 42
    memberAccess   go to state 43
    unaryOperator  go to state 34
    call           go to state 35
    expression     go to state 46


State 23

   18 whileStmt: WHILE • expression "{" compoundStmt "}"

    "-"         shift, and go to state 12
    "!"         shift, and go to state 13
    "("         shift, and go to state 15
    INT         shift, and go to state 16
    FLOAT       shift, and go to state 17
    BOOL        shift, and go to state 18
    STRING_LIT  shift, and go to state 19
    THIS        shift, and go to state 20
    IDENT       shift, and go to state 6

    identifier     go to state 42
    memberAccess   go to state 43
    unaryOperator  go to state 34
    call           go to state 35
    expression     go to state 47


State 24

    6 varDecl: identifier • ":" identifier
   11 assignment: identifier • "=" expression
   64 expression: identifier •

    "="  shift, and go to state 48
    ":"  shift, and go to state 49

    $default  reduce using rule 64 (expression)


State 25

    7 memberDecl: memberAccess • ":" identifier
   10 assignment: memberAccess • "=" expression
   67 expression: memberAccess •

    "="  shift, and go to state 50
    ":"  shift, and go to state 51

    $default  reduce using rule 67 (expression)


State 26

    8 staticAssignment: varDecl • "=" expression

    "="  shift, and go to state 52


State 27

    9 staticAssignment: memberDecl • "=" expression

    "="  shift, and go to state 53


State 28

   22 statement: staticAssignment • ";"

    ";"  shift, and go to state 54


State 29

   21 statement: assignment • ";"

    ";"  shift, and go to state 55


State 30

   23 statement: returnStmt • ";"

    ";"  shift, and go to state 56


State 31

   24 statement: ifStmt •

    $default  reduce using rule 24 (statement)


State 32

   25 statement: whileStmt •

    $default  reduce using rule 25 (statement)


State 33

    3 compoundStmt: compoundStmt statement •

    $default  reduce using rule 3 (compoundStmt)


State 34

   68 expression: unaryOperator • expression

    "-"         shift, and go to state 12
    "!"         shift, and go to state 13
    "("         shift, and go to state 15
    INT         shift, and go to state 16
    FLOAT       shift, and go to state 17
    BOOL        shift, and go to state 18
    STRING_LIT  shift, and go to state 19
    THIS        shift, and go to state 20
    IDENT       shift, and go to state 6

    identifier     go to state 42
    memberAccess   go to state 43
    unaryOperator  go to state 34
    call           go to state 35
    expression     go to state 57


State 35

   66 expression: call •

    $default  reduce using rule 66 (expression)


State 36

    5 memberAccess: expression • "." identifier
   20 statement: expression • ";"
   38 call: expression • "." identifier "(" args ")"
   69 expression: expression • binaryOperator expression

    "-"   shift, and go to state 58
    "+"   shift, and go to state 59
    "*"   shift, and go to state 60
    "/"   shift, and go to state 61
    "%"   shift, and go to state 62
    "<"   shift, and go to state 63
    ">"   shift, and go to state 64
    "<="  shift, and go to state 65
    ">="  shift, and go to state 66
    "=="  shift, and go to state 67
    "."   shift, and go to state 68
    ";"   shift, and go to state 69

    binaryOperator  go to state 70


State 37

   58 classesNonEmpty: classesNonEmpty "," class •

    $default  reduce using rule 58 (classesNonEmpty)


State 38

    6 varDecl: identifier • ":" identifier

    ":"  shift, and go to state 49


State 39

   45 paramsNonEmpty: varDecl •

    $default  reduce using rule 45 (paramsNonEmpty)


State 40

   53 class: CLASS identifier "(" params • ")" "{" compoundStmt methods "}"
   54      | CLASS identifier "(" params • ")" EXTENDS identifier "{" compoundStmt methods "}"

    ")"  shift, and go to state 71


State 41

   43 params: paramsNonEmpty •
   46 paramsNonEmpty: paramsNonEmpty • "," varDecl

    ","  shift, and go to state 72

    $default  reduce using rule 43 (params)


State 42

   64 expression: identifier •

    $default  reduce using rule 64 (expression)


State 43

   67 expression: memberAccess •

    $default  reduce using rule 67 (expression)


State 44

    5 memberAccess: expression • "." identifier
   38 call: expression • "." identifier "(" args ")"
   65 expression: "(" expression • ")"
   69           | expression • binaryOperator expression

    "-"   shift, and go to state 58
    "+"   shift, and go to state 59
    "*"   shift, and go to state 60
    "/"   shift, and go to state 61
    "%"   shift, and go to state 62
    "<"   shift, and go to state 63
    ">"   shift, and go to state 64
    "<="  shift, and go to state 65
    ">="  shift, and go to state 66
    "=="  shift, and go to state 67
    "."   shift, and go to state 68
    ")"   shift, and go to state 73

    binaryOperator  go to state 70


State 45

    5 memberAccess: expression • "." identifier
   12 returnStmt: RETURN expression •
   38 call: expression • "." identifier "(" args ")"
   69 expression: expression • binaryOperator expression

    "-"   shift, and go to state 58
    "+"   shift, and go to state 59
    "*"   shift, and go to state 60
    "/"   shift, and go to state 61
    "%"   shift, and go to state 62
    "<"   shift, and go to state 63
    ">"   shift, and go to state 64
    "<="  shift, and go to state 65
    ">="  shift, and go to state 66
    "=="  shift, and go to state 67
    "."   shift, and go to state 68

    $default  reduce using rule 12 (returnStmt)

    binaryOperator  go to state 70


State 46

    5 memberAccess: expression • "." identifier
   14 ifStmt: IF expression • "{" compoundStmt "}" optElseIf
   38 call: expression • "." identifier "(" args ")"
   69 expression: expression • binaryOperator expression

    "-"   shift, and go to state 58
    "+"   shift, and go to state 59
    "*"   shift, and go to state 60
    "/"   shift, and go to state 61
    "%"   shift, and go to state 62
    "<"   shift, and go to state 63
    ">"   shift, and go to state 64
    "<="  shift, and go to state 65
    ">="  shift, and go to state 66
    "=="  shift, and go to state 67
    "."   shift, and go to state 68
    "{"   shift, and go to state 74

    binaryOperator  go to state 70


State 47

    5 memberAccess: expression • "." identifier
   18 whileStmt: WHILE expression • "{" compoundStmt "}"
   38 call: expression • "." identifier "(" args ")"
   69 expression: expression • binaryOperator expression

    "-"   shift, and go to state 58
    "+"   shift, and go to state 59
    "*"   shift, and go to state 60
    "/"   shift, and go to state 61
    "%"   shift, and go to state 62
    "<"   shift, and go to state 63
    ">"   shift, and go to state 64
    "<="  shift, and go to state 65
    ">="  shift, and go to state 66
    "=="  shift, and go to state 67
    "."   shift, and go to state 68
    "{"   shift, and go to state 75

    binaryOperator  go to state 70


State 48

   11 assignment: identifier "=" • expression

    "-"         shift, and go to state 12
    "!"         shift, and go to state 13
    "("         shift, and go to state 15
    INT         shift, and go to state 16
    FLOAT       shift, and go to state 17
    BOOL        shift, and go to state 18
    STRING_LIT  shift, and go to state 19
    THIS        shift, and go to state 20
    IDENT       shift, and go to state 6

    identifier     go to state 42
    memberAccess   go to state 43
    unaryOperator  go to state 34
    call           go to state 35
    expression     go to state 76


State 49

    6 varDecl: identifier ":" • identifier

    IDENT  shift, and go to state 6

    identifier  go to state 77


State 50

   10 assignment: memberAccess "=" • expression

    "-"         shift, and go to state 12
    "!"         shift, and go to state 13
    "("         shift, and go to state 15
    INT         shift, and go to state 16
    FLOAT       shift, and go to state 17
    BOOL        shift, and go to state 18
    STRING_LIT  shift, and go to state 19
    THIS        shift, and go to state 20
    IDENT       shift, and go to state 6

    identifier     go to state 42
    memberAccess   go to state 43
    unaryOperator  go to state 34
    call           go to state 35
    expression     go to state 78


State 51

    7 memberDecl: memberAccess ":" • identifier

    IDENT  shift, and go to state 6

    identifier  go to state 79


State 52

    8 staticAssignment: varDecl "=" • expression

    "-"         shift, and go to state 12
    "!"         shift, and go to state 13
    "("         shift, and go to state 15
    INT         shift, and go to state 16
    FLOAT       shift, and go to state 17
    BOOL        shift, and go to state 18
    STRING_LIT  shift, and go to state 19
    THIS        shift, and go to state 20
    IDENT       shift, and go to state 6

    identifier     go to state 42
    memberAccess   go to state 43
    unaryOperator  go to state 34
    call           go to state 35
    expression     go to state 80


State 53

    9 staticAssignment: memberDecl "=" • expression

    "-"         shift, and go to state 12
    "!"         shift, and go to state 13
    "("         shift, and go to state 15
    INT         shift, and go to state 16
    FLOAT       shift, and go to state 17
    BOOL        shift, and go to state 18
    STRING_LIT  shift, and go to state 19
    THIS        shift, and go to state 20
    IDENT       shift, and go to state 6

    identifier     go to state 42
    memberAccess   go to state 43
    unaryOperator  go to state 34
    call           go to state 35
    expression     go to state 81


State 54

   22 statement: staticAssignment ";" •

    $default  reduce using rule 22 (statement)


State 55

   21 statement: assignment ";" •

    $default  reduce using rule 21 (statement)


State 56

   23 statement: returnStmt ";" •

    $default  reduce using rule 23 (statement)


State 57

    5 memberAccess: expression • "." identifier
   38 call: expression • "." identifier "(" args ")"
   68 expression: unaryOperator expression •
   69           | expression • binaryOperator expression

    $default  reduce using rule 68 (expression)

    binaryOperator  go to state 70


State 58

   27 binaryOperator: "-" •

    $default  reduce using rule 27 (binaryOperator)


State 59

   26 binaryOperator: "+" •

    $default  reduce using rule 26 (binaryOperator)


State 60

   28 binaryOperator: "*" •

    $default  reduce using rule 28 (binaryOperator)


State 61

   29 binaryOperator: "/" •

    $default  reduce using rule 29 (binaryOperator)


State 62

   30 binaryOperator: "%" •

    $default  reduce using rule 30 (binaryOperator)


State 63

   31 binaryOperator: "<" •

    $default  reduce using rule 31 (binaryOperator)


State 64

   32 binaryOperator: ">" •

    $default  reduce using rule 32 (binaryOperator)


State 65

   33 binaryOperator: "<=" •

    $default  reduce using rule 33 (binaryOperator)


State 66

   34 binaryOperator: ">=" •

    $default  reduce using rule 34 (binaryOperator)


State 67

   35 binaryOperator: "==" •

    $default  reduce using rule 35 (binaryOperator)


State 68

    5 memberAccess: expression "." • identifier
   38 call: expression "." • identifier "(" args ")"

    IDENT  shift, and go to state 6

    identifier  go to state 82


State 69

   20 statement: expression ";" •

    $default  reduce using rule 20 (statement)


State 70

   69 expression: expression binaryOperator • expression

    "-"         shift, and go to state 12
    "!"         shift, and go to state 13
    "("         shift, and go to state 15
    INT         shift, and go to state 16
    FLOAT       shift, and go to state 17
    BOOL        shift, and go to state 18
    STRING_LIT  shift, and go to state 19
    THIS        shift, and go to state 20
    IDENT       shift, and go to state 6

    identifier     go to state 42
    memberAccess   go to state 43
    unaryOperator  go to state 34
    call           go to state 35
    expression     go to state 83


State 71

   53 class: CLASS identifier "(" params ")" • "{" compoundStmt methods "}"
   54      | CLASS identifier "(" params ")" • EXTENDS identifier "{" compoundStmt methods "}"

    "{"      shift, and go to state 84
    EXTENDS  shift, and go to state 85


State 72

   46 paramsNonEmpty: paramsNonEmpty "," • varDecl

    IDENT  shift, and go to state 6

    identifier  go to state 38
    varDecl     go to state 86


State 73

   65 expression: "(" expression ")" •

    $default  reduce using rule 65 (expression)


State 74

   14 ifStmt: IF expression "{" • compoundStmt "}" optElseIf

    $default  reduce using rule 2 (compoundStmt)

    compoundStmt  go to state 87


State 75

   18 whileStmt: WHILE expression "{" • compoundStmt "}"

    $default  reduce using rule 2 (compoundStmt)

    compoundStmt  go to state 88


State 76

    5 memberAccess: expression • "." identifier
   11 assignment: identifier "=" expression •
   38 call: expression • "." identifier "(" args ")"
   69 expression: expression • binaryOperator expression

    "-"   shift, and go to state 58
    "+"   shift, and go to state 59
    "*"   shift, and go to state 60
    "/"   shift, and go to state 61
    "%"   shift, and go to state 62
    "<"   shift, and go to state 63
    ">"   shift, and go to state 64
    "<="  shift, and go to state 65
    ">="  shift, and go to state 66
    "=="  shift, and go to state 67
    "."   shift, and go to state 68

    $default  reduce using rule 11 (assignment)

    binaryOperator  go to state 70


State 77

    6 varDecl: identifier ":" identifier •

    $default  reduce using rule 6 (varDecl)


State 78

    5 memberAccess: expression • "." identifier
   10 assignment: memberAccess "=" expression •
   38 call: expression • "." identifier "(" args ")"
   69 expression: expression • binaryOperator expression

    "-"   shift, and go to state 58
    "+"   shift, and go to state 59
    "*"   shift, and go to state 60
    "/"   shift, and go to state 61
    "%"   shift, and go to state 62
    "<"   shift, and go to state 63
    ">"   shift, and go to state 64
    "<="  shift, and go to state 65
    ">="  shift, and go to state 66
    "=="  shift, and go to state 67
    "."   shift, and go to state 68

    $default  reduce using rule 10 (assignment)

    binaryOperator  go to state 70


State 79

    7 memberDecl: memberAccess ":" identifier •

    $default  reduce using rule 7 (memberDecl)


State 80

    5 memberAccess: expression • "." identifier
    8 staticAssignment: varDecl "=" expression •
   38 call: expression • "." identifier "(" args ")"
   69 expression: expression • binaryOperator expression

    "-"   shift, and go to state 58
    "+"   shift, and go to state 59
    "*"   shift, and go to state 60
    "/"   shift, and go to state 61
    "%"   shift, and go to state 62
    "<"   shift, and go to state 63
    ">"   shift, and go to state 64
    "<="  shift, and go to state 65
    ">="  shift, and go to state 66
    "=="  shift, and go to state 67
    "."   shift, and go to state 68

    $default  reduce using rule 8 (staticAssignment)

    binaryOperator  go to state 70


State 81

    5 memberAccess: expression • "." identifier
    9 staticAssignment: memberDecl "=" expression •
   38 call: expression • "." identifier "(" args ")"
   69 expression: expression • binaryOperator expression

    "-"   shift, and go to state 58
    "+"   shift, and go to state 59
    "*"   shift, and go to state 60
    "/"   shift, and go to state 61
    "%"   shift, and go to state 62
    "<"   shift, and go to state 63
    ">"   shift, and go to state 64
    "<="  shift, and go to state 65
    ">="  shift, and go to state 66
    "=="  shift, and go to state 67
    "."   shift, and go to state 68

    $default  reduce using rule 9 (staticAssignment)

    binaryOperator  go to state 70


State 82

    5 memberAccess: expression "." identifier •
   38 call: expression "." identifier • "(" args ")"

    "("  shift, and go to state 89

    $default  reduce using rule 5 (memberAccess)


State 83

    5 memberAccess: expression • "." identifier
   38 call: expression • "." identifier "(" args ")"
   69 expression: expression • binaryOperator expression
   69           | expression binaryOperator expression •

    "-"   shift, and go to state 58
    "+"   shift, and go to state 59
    "*"   shift, and go to state 60
    "/"   shift, and go to state 61
    "%"   shift, and go to state 62
    "<"   shift, and go to state 63
    ">"   shift, and go to state 64
    "<="  shift, and go to state 65
    ">="  shift, and go to state 66
    "=="  shift, and go to state 67
    "."   shift, and go to state 68

    "-"       [reduce using rule 69 (expression)]
    "+"       [reduce using rule 69 (expression)]
    "*"       [reduce using rule 69 (expression)]
    "/"       [reduce using rule 69 (expression)]
    "%"       [reduce using rule 69 (expression)]
    "<"       [reduce using rule 69 (expression)]
    ">"       [reduce using rule 69 (expression)]
    "<="      [reduce using rule 69 (expression)]
    ">="      [reduce using rule 69 (expression)]
    "=="      [reduce using rule 69 (expression)]
    "."       [reduce using rule 69 (expression)]
    $default  reduce using rule 69 (expression)

    binaryOperator  go to state 70


State 84

   53 class: CLASS identifier "(" params ")" "{" • compoundStmt methods "}"

    $default  reduce using rule 2 (compoundStmt)

    compoundStmt  go to state 90


State 85

   54 class: CLASS identifier "(" params ")" EXTENDS • identifier "{" compoundStmt methods "}"

    IDENT  shift, and go to state 6

    identifier  go to state 91


State 86

   46 paramsNonEmpty: paramsNonEmpty "," varDecl •

    $default  reduce using rule 46 (paramsNonEmpty)


State 87

    3 compoundStmt: compoundStmt • statement
   14 ifStmt: IF expression "{" compoundStmt • "}" optElseIf

    "-"         shift, and go to state 12
    "!"         shift, and go to state 13
    ";"         shift, and go to state 14
    "("         shift, and go to state 15
    "}"         shift, and go to state 92
    INT         shift, and go to state 16
    FLOAT       shift, and go to state 17
    BOOL        shift, and go to state 18
    STRING_LIT  shift, and go to state 19
    THIS        shift, and go to state 20
    IDENT       shift, and go to state 6
    RETURN      shift, and go to state 21
    IF          shift, and go to state 22
    WHILE       shift, and go to state 23

    identifier        go to state 24
    memberAccess      go to state 25
    varDecl           go to state 26
    memberDecl        go to state 27
    staticAssignment  go to state 28
    assignment        go to state 29
    returnStmt        go to state 30
    ifStmt            go to state 31
    whileStmt         go to state 32
    statement         go to state 33
    unaryOperator     go to state 34
    call              go to state 35
    expression        go to state 36


State 88

    3 compoundStmt: compoundStmt • statement
   18 whileStmt: WHILE expression "{" compoundStmt • "}"

    "-"         shift, and go to state 12
    "!"         shift, and go to state 13
    ";"         shift, and go to state 14
    "("         shift, and go to state 15
    "}"         shift, and go to state 93
    INT         shift, and go to state 16
    FLOAT       shift, and go to state 17
    BOOL        shift, and go to state 18
    STRING_LIT  shift, and go to state 19
    THIS        shift, and go to state 20
    IDENT       shift, and go to state 6
    RETURN      shift, and go to state 21
    IF          shift, and go to state 22
    WHILE       shift, and go to state 23

    identifier        go to state 24
    memberAccess      go to state 25
    varDecl           go to state 26
    memberDecl        go to state 27
    staticAssignment  go to state 28
    assignment        go to state 29
    returnStmt        go to state 30
    ifStmt            go to state 31
    whileStmt         go to state 32
    statement         go to state 33
    unaryOperator     go to state 34
    call              go to state 35
    expression        go to state 36


State 89

   38 call: expression "." identifier "(" • args ")"

    "-"         shift, and go to state 12
    "!"         shift, and go to state 13
    "("         shift, and go to state 15
    INT         shift, and go to state 16
    FLOAT       shift, and go to state 17
    BOOL        shift, and go to state 18
    STRING_LIT  shift, and go to state 19
    THIS        shift, and go to state 20
    IDENT       shift, and go to state 6

    $default  reduce using rule 40 (args)

    identifier     go to state 42
    memberAccess   go to state 43
    unaryOperator  go to state 34
    call           go to state 35
    args           go to state 94
    argsNonEmpty   go to state 95
    expression     go to state 96


State 90

    3 compoundStmt: compoundStmt • statement
   53 class: CLASS identifier "(" params ")" "{" compoundStmt • methods "}"

    "-"         shift, and go to state 12
    "!"         shift, and go to state 13
    ";"         shift, and go to state 14
    "("         shift, and go to state 15
    INT         shift, and go to state 16
    FLOAT       shift, and go to state 17
    BOOL        shift, and go to state 18
    STRING_LIT  shift, and go to state 19
    THIS        shift, and go to state 20
    IDENT       shift, and go to state 6
    DEF         shift, and go to state 97
    RETURN      shift, and go to state 21
    IF          shift, and go to state 22
    WHILE       shift, and go to state 23

    $default  reduce using rule 50 (methods)

    identifier        go to state 24
    memberAccess      go to state 25
    varDecl           go to state 26
    memberDecl        go to state 27
    staticAssignment  go to state 28
    assignment        go to state 29
    returnStmt        go to state 30
    ifStmt            go to state 31
    whileStmt         go to state 32
    statement         go to state 33
    unaryOperator     go to state 34
    call              go to state 35
    method            go to state 98
    methods           go to state 99
    methodsNonEmpty   go to state 100
    expression        go to state 36


State 91

   54 class: CLASS identifier "(" params ")" EXTENDS identifier • "{" compoundStmt methods "}"

    "{"  shift, and go to state 101


State 92

   14 ifStmt: IF expression "{" compoundStmt "}" • optElseIf

    ELIF  shift, and go to state 102
    ELSE  shift, and go to state 103

    $default  reduce using rule 17 (optElseIf)

    optElseIf  go to state 104


State 93

   18 whileStmt: WHILE expression "{" compoundStmt "}" •

    $default  reduce using rule 18 (whileStmt)


State 94

   38 call: expression "." identifier "(" args • ")"

    ")"  shift, and go to state 105


State 95

   39 args: argsNonEmpty •
   42 argsNonEmpty: argsNonEmpty • "," expression

    ","  shift, and go to state 106

    $default  reduce using rule 39 (args)


State 96

    5 memberAccess: expression • "." identifier
   38 call: expression • "." identifier "(" args ")"
   41 argsNonEmpty: expression •
   69 expression: expression • binaryOperator expression

    "-"   shift, and go to state 58
    "+"   shift, and go to state 59
    "*"   shift, and go to state 60
    "/"   shift, and go to state 61
    "%"   shift, and go to state 62
    "<"   shift, and go to state 63
    ">"   shift, and go to state 64
    "<="  shift, and go to state 65
    ">="  shift, and go to state 66
    "=="  shift, and go to state 67
    "."   shift, and go to state 68

    $default  reduce using rule 41 (argsNonEmpty)

    binaryOperator  go to state 70


State 97

   47 method: DEF • identifier "(" params ")" ":" identifier "{" compoundStmt "}"
   48       | DEF • identifier "(" params ")" "{" compoundStmt "}"

    IDENT  shift, and go to state 6

    identifier  go to state 107


State 98

   51 methodsNonEmpty: method •

    $default  reduce using rule 51 (methodsNonEmpty)


State 99

   53 class: CLASS identifier "(" params ")" "{" compoundStmt methods • "}"

    "}"  shift, and go to state 108


State 100

   49 methods: methodsNonEmpty •
   52 methodsNonEmpty: methodsNonEmpty • "," method

    ","  shift, and go to state 109

    $default  reduce using rule 49 (methods)


State 101

   54 class: CLASS identifier "(" params ")" EXTENDS identifier "{" • compoundStmt methods "}"

    $default  reduce using rule 2 (compoundStmt)

    compoundStmt  go to state 110


State 102

   15 optElseIf: ELIF • expression "{" compoundStmt "}" optElseIf

    "-"         shift, and go to state 12
    "!"         shift, and go to state 13
    "("         shift, and go to state 15
    INT         shift, and go to state 16
    FLOAT       shift, and go to state 17
    BOOL        shift, and go to state 18
    STRING_LIT  shift, and go to state 19
    THIS        shift, and go to state 20
    IDENT       shift, and go to state 6

    identifier     go to state 42
    memberAccess   go to state 43
    unaryOperator  go to state 34
    call           go to state 35
    expression     go to state 111


State 103

   16 optElseIf: ELSE • "{" compoundStmt "}"

    "{"  shift, and go to state 112


State 104

   14 ifStmt: IF expression "{" compoundStmt "}" optElseIf •

    $default  reduce using rule 14 (ifStmt)


State 105

   38 call: expression "." identifier "(" args ")" •

    $default  reduce using rule 38 (call)


State 106

   42 argsNonEmpty: argsNonEmpty "," • expression

    "-"         shift, and go to state 12
    "!"         shift, and go to state 13
    "("         shift, and go to state 15
    INT         shift, and go to state 16
    FLOAT       shift, and go to state 17
    BOOL        shift, and go to state 18
    STRING_LIT  shift, and go to state 19
    THIS        shift, and go to state 20
    IDENT       shift, and go to state 6

    identifier     go to state 42
    memberAccess   go to state 43
    unaryOperator  go to state 34
    call           go to state 35
    expression     go to state 113


State 107

   47 method: DEF identifier • "(" params ")" ":" identifier "{" compoundStmt "}"
   48       | DEF identifier • "(" params ")" "{" compoundStmt "}"

    "("  shift, and go to state 114


State 108

   53 class: CLASS identifier "(" params ")" "{" compoundStmt methods "}" •

    $default  reduce using rule 53 (class)


State 109

   52 methodsNonEmpty: methodsNonEmpty "," • method

    DEF  shift, and go to state 97

    method  go to state 115


State 110

    3 compoundStmt: compoundStmt • statement
   54 class: CLASS identifier "(" params ")" EXTENDS identifier "{" compoundStmt • methods "}"

    "-"         shift, and go to state 12
    "!"         shift, and go to state 13
    ";"         shift, and go to state 14
    "("         shift, and go to state 15
    INT         shift, and go to state 16
    FLOAT       shift, and go to state 17
    BOOL        shift, and go to state 18
    STRING_LIT  shift, and go to state 19
    THIS        shift, and go to state 20
    IDENT       shift, and go to state 6
    DEF         shift, and go to state 97
    RETURN      shift, and go to state 21
    IF          shift, and go to state 22
    WHILE       shift, and go to state 23

    $default  reduce using rule 50 (methods)

    identifier        go to state 24
    memberAccess      go to state 25
    varDecl           go to state 26
    memberDecl        go to state 27
    staticAssignment  go to state 28
    assignment        go to state 29
    returnStmt        go to state 30
    ifStmt            go to state 31
    whileStmt         go to state 32
    statement         go to state 33
    unaryOperator     go to state 34
    call              go to state 35
    method            go to state 98
    methods           go to state 116
    methodsNonEmpty   go to state 100
    expression        go to state 36


State 111

    5 memberAccess: expression • "." identifier
   15 optElseIf: ELIF expression • "{" compoundStmt "}" optElseIf
   38 call: expression • "." identifier "(" args ")"
   69 expression: expression • binaryOperator expression

    "-"   shift, and go to state 58
    "+"   shift, and go to state 59
    "*"   shift, and go to state 60
    "/"   shift, and go to state 61
    "%"   shift, and go to state 62
    "<"   shift, and go to state 63
    ">"   shift, and go to state 64
    "<="  shift, and go to state 65
    ">="  shift, and go to state 66
    "=="  shift, and go to state 67
    "."   shift, and go to state 68
    "{"   shift, and go to state 117

    binaryOperator  go to state 70


State 112

   16 optElseIf: ELSE "{" • compoundStmt "}"

    $default  reduce using rule 2 (compoundStmt)

    compoundStmt  go to state 118


State 113

    5 memberAccess: expression • "." identifier
   38 call: expression • "." identifier "(" args ")"
   42 argsNonEmpty: argsNonEmpty "," expression •
   69 expression: expression • binaryOperator expression

    "-"   shift, and go to state 58
    "+"   shift, and go to state 59
    "*"   shift, and go to state 60
    "/"   shift, and go to state 61
    "%"   shift, and go to state 62
    "<"   shift, and go to state 63
    ">"   shift, and go to state 64
    "<="  shift, and go to state 65
    ">="  shift, and go to state 66
    "=="  shift, and go to state 67
    "."   shift, and go to state 68

    $default  reduce using rule 42 (argsNonEmpty)

    binaryOperator  go to state 70


State 114

   47 method: DEF identifier "(" • params ")" ":" identifier "{" compoundStmt "}"
   48       | DEF identifier "(" • params ")" "{" compoundStmt "}"

    IDENT  shift, and go to state 6

    $default  reduce using rule 44 (params)

    identifier      go to state 38
    varDecl         go to state 39
    params          go to state 119
    paramsNonEmpty  go to state 41


State 115

   52 methodsNonEmpty: methodsNonEmpty "," method •

    $default  reduce using rule 52 (methodsNonEmpty)


State 116

   54 class: CLASS identifier "(" params ")" EXTENDS identifier "{" compoundStmt methods • "}"

    "}"  shift, and go to state 120


State 117

   15 optElseIf: ELIF expression "{" • compoundStmt "}" optElseIf

    $default  reduce using rule 2 (compoundStmt)

    compoundStmt  go to state 121


State 118

    3 compoundStmt: compoundStmt • statement
   16 optElseIf: ELSE "{" compoundStmt • "}"

    "-"         shift, and go to state 12
    "!"         shift, and go to state 13
    ";"         shift, and go to state 14
    "("         shift, and go to state 15
    "}"         shift, and go to state 122
    INT         shift, and go to state 16
    FLOAT       shift, and go to state 17
    BOOL        shift, and go to state 18
    STRING_LIT  shift, and go to state 19
    THIS        shift, and go to state 20
    IDENT       shift, and go to state 6
    RETURN      shift, and go to state 21
    IF          shift, and go to state 22
    WHILE       shift, and go to state 23

    identifier        go to state 24
    memberAccess      go to state 25
    varDecl           go to state 26
    memberDecl        go to state 27
    staticAssignment  go to state 28
    assignment        go to state 29
    returnStmt        go to state 30
    ifStmt            go to state 31
    whileStmt         go to state 32
    statement         go to state 33
    unaryOperator     go to state 34
    call              go to state 35
    expression        go to state 36


State 119

   47 method: DEF identifier "(" params • ")" ":" identifier "{" compoundStmt "}"
   48       | DEF identifier "(" params • ")" "{" compoundStmt "}"

    ")"  shift, and go to state 123


State 120

   54 class: CLASS identifier "(" params ")" EXTENDS identifier "{" compoundStmt methods "}" •

    $default  reduce using rule 54 (class)


State 121

    3 compoundStmt: compoundStmt • statement
   15 optElseIf: ELIF expression "{" compoundStmt • "}" optElseIf

    "-"         shift, and go to state 12
    "!"         shift, and go to state 13
    ";"         shift, and go to state 14
    "("         shift, and go to state 15
    "}"         shift, and go to state 124
    INT         shift, and go to state 16
    FLOAT       shift, and go to state 17
    BOOL        shift, and go to state 18
    STRING_LIT  shift, and go to state 19
    THIS        shift, and go to state 20
    IDENT       shift, and go to state 6
    RETURN      shift, and go to state 21
    IF          shift, and go to state 22
    WHILE       shift, and go to state 23

    identifier        go to state 24
    memberAccess      go to state 25
    varDecl           go to state 26
    memberDecl        go to state 27
    staticAssignment  go to state 28
    assignment        go to state 29
    returnStmt        go to state 30
    ifStmt            go to state 31
    whileStmt         go to state 32
    statement         go to state 33
    unaryOperator     go to state 34
    call              go to state 35
    expression        go to state 36


State 122

   16 optElseIf: ELSE "{" compoundStmt "}" •

    $default  reduce using rule 16 (optElseIf)


State 123

   47 method: DEF identifier "(" params ")" • ":" identifier "{" compoundStmt "}"
   48       | DEF identifier "(" params ")" • "{" compoundStmt "}"

    ":"  shift, and go to state 125
    "{"  shift, and go to state 126


State 124

   15 optElseIf: ELIF expression "{" compoundStmt "}" • optElseIf

    ELIF  shift, and go to state 102
    ELSE  shift, and go to state 103

    $default  reduce using rule 17 (optElseIf)

    optElseIf  go to state 127


State 125

   47 method: DEF identifier "(" params ")" ":" • identifier "{" compoundStmt "}"

    IDENT  shift, and go to state 6

    identifier  go to state 128


State 126

   48 method: DEF identifier "(" params ")" "{" • compoundStmt "}"

    $default  reduce using rule 2 (compoundStmt)

    compoundStmt  go to state 129


State 127

   15 optElseIf: ELIF expression "{" compoundStmt "}" optElseIf •

    $default  reduce using rule 15 (optElseIf)


State 128

   47 method: DEF identifier "(" params ")" ":" identifier • "{" compoundStmt "}"

    "{"  shift, and go to state 130


State 129

    3 compoundStmt: compoundStmt • statement
   48 method: DEF identifier "(" params ")" "{" compoundStmt • "}"

    "-"         shift, and go to state 12
    "!"         shift, and go to state 13
    ";"         shift, and go to state 14
    "("         shift, and go to state 15
    "}"         shift, and go to state 131
    INT         shift, and go to state 16
    FLOAT       shift, and go to state 17
    BOOL        shift, and go to state 18
    STRING_LIT  shift, and go to state 19
    THIS        shift, and go to state 20
    IDENT       shift, and go to state 6
    RETURN      shift, and go to state 21
    IF          shift, and go to state 22
    WHILE       shift, and go to state 23

    identifier        go to state 24
    memberAccess      go to state 25
    varDecl           go to state 26
    memberDecl        go to state 27
    staticAssignment  go to state 28
    assignment        go to state 29
    returnStmt        go to state 30
    ifStmt            go to state 31
    whileStmt         go to state 32
    statement         go to state 33
    unaryOperator     go to state 34
    call              go to state 35
    expression        go to state 36


State 130

   47 method: DEF identifier "(" params ")" ":" identifier "{" • compoundStmt "}"

    $default  reduce using rule 2 (compoundStmt)

    compoundStmt  go to state 132


State 131

   48 method: DEF identifier "(" params ")" "{" compoundStmt "}" •

    $default  reduce using rule 48 (method)


State 132

    3 compoundStmt: compoundStmt • statement
   47 method: DEF identifier "(" params ")" ":" identifier "{" compoundStmt • "}"

    "-"         shift, and go to state 12
    "!"         shift, and go to state 13
    ";"         shift, and go to state 14
    "("         shift, and go to state 15
    "}"         shift, and go to state 133
    INT         shift, and go to state 16
    FLOAT       shift, and go to state 17
    BOOL        shift, and go to state 18
    STRING_LIT  shift, and go to state 19
    THIS        shift, and go to state 20
    IDENT       shift, and go to state 6
    RETURN      shift, and go to state 21
    IF          shift, and go to state 22
    WHILE       shift, and go to state 23

    identifier        go to state 24
    memberAccess      go to state 25
    varDecl           go to state 26
    memberDecl        go to state 27
    staticAssignment  go to state 28
    assignment        go to state 29
    returnStmt        go to state 30
    ifStmt            go to state 31
    whileStmt         go to state 32
    statement         go to state 33
    unaryOperator     go to state 34
    call              go to state 35
    expression        go to state 36


State 133

   47 method: DEF identifier "(" params ")" ":" identifier "{" compoundStmt "}" •

    $default  reduce using rule 47 (method)
